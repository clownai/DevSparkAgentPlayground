// Mock implementation of dockerode
class Docker {
  constructor() {
    this.containers = new Map();
    this.images = new Map();
    this.networks = new Map();
    this.volumes = new Map();
  }

  container(id) {
    return {
      id,
      start: async () => ({ id }),
      stop: async () => ({ id }),
      remove: async () => ({ id }),
      inspect: async () => ({
        id,
        State: {
          Status: 'running',
          Running: true,
          ExitCode: 0
        },
        Config: {
          Image: 'mock-image',
          Cmd: ['node', 'index.js']
        },
        HostConfig: {
          Memory: 256 * 1024 * 1024,
          CpuShares: 512
        }
      }),
      stats: async () => ({
        memory_stats: {
          usage: 100 * 1024 * 1024,
          limit: 256 * 1024 * 1024
        },
        cpu_stats: {
          cpu_usage: {
            total_usage: 1000000
          },
          system_cpu_usage: 10000000
        }
      }),
      exec: {
        create: async (options) => ({
          id: `exec-${Math.random().toString(36).substring(2, 9)}`,
          start: async (options) => {
            return {
              output: Buffer.from('Mock execution output'),
              inspect: async () => ({
                ExitCode: 0
              })
            };
          }
        })
      }
    };
  }

  async createContainer(options) {
    const id = `container-${Math.random().toString(36).substring(2, 9)}`;
    this.containers.set(id, {
      id,
      options
    });
    return {
      id,
      start: async () => ({ id }),
      stop: async () => ({ id }),
      remove: async () => ({ id }),
      inspect: async () => ({
        id,
        State: {
          Status: 'created',
          Running: false,
          ExitCode: 0
        },
        Config: options,
        HostConfig: options.HostConfig
      })
    };
  }

  async listContainers() {
    return Array.from(this.containers.values()).map(container => ({
      Id: container.id,
      Names: [`/mock-container-${container.id}`],
      Image: 'mock-image',
      State: 'running',
      Status: 'Up 1 hour'
    }));
  }
}

module.exports = Docker;
